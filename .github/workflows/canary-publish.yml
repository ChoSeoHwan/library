name: canary publish

on:
  issue_comment:
    types: [ created ]

jobs:
  canary-publish:
    name: canary-publish
    runs-on: ubuntu-latest
    if:
      (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'CONTRIBUTOR') &&
      startsWith(github.event.comment.body, '/canary-publish')
    steps:
      - name: Comment to command
        uses: hasura/comment-progress@v2.1.0
        with:
          id: canary-publish-comment-${{ github.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.issue.number }}
          message: |
            > /canary-publish

            Trying to publish canary version...
            If you want to see detailed execution status, please [click here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).

      - name: checkout master
        uses: actions/checkout@v2

      - name: get pr information
        uses: actions/github-script@v4
        id: pr
        with:
          script: |
            const { getPrData } = require('./.github/scripts');
            return await getPrData({ github, context, core });

      - name: get upgrade type from label
        id: upgrade-type
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let { LABELS } = process.env;
            LABELS = JSON.parse(LABELS).map((label) => label.name);

            const regexp = /upgrade:(major|minor|patch|premajor|preminor|prepatch|prerelease])/;
            const upgradeLabels = LABELS.filter((label) => regexp.test(label));

            if (upgradeLabels.length > 1) {
              core.setFailed('Upgrade label must be include only once');
              return;
            }

            const label = upgradeLabels[0] || 'upgrade:patch';
            const matches = label.match(regexp);

            const type = matches && matches[1] ? matches[1] : 'patch';

            core.info(`Labels : ${JSON.stringify(LABELS)}`);
            core.info(`Upgrade type : ${type}`);

            return type;
        env:
          LABELS: ${{ toJSON(fromJSON(steps.pr.outputs.result).labels) }}

      - name: checkout pr version
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJSON(steps.pr.outputs.result).head.ref }}
          repository: ${{ fromJSON(steps.pr.outputs.result).head.repo.full_name }}
          fetch-depth: 0

      - name: setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: set npm autority
        run: |
          yarn logout
          echo "@apollo-elements:registry=http://registry.npmjs.org/" > .npmrc
          echo "registry=http://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: install dependencies
        run: yarn install

      - name: get lerna changed list
        id: changed-packages
        run: echo "::set-output name=list::$(lerna changed --json | awk '{print}' ORS='')"

      - name: check lerna changed list
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let { LIST } = process.env;
            LIST = JSON.parse(LIST);

            if (LIST.length === 0) {
              core.setFailed('No packages have changed');
              return;
            }
        env:
          LIST: ${{ steps.changed-packages.outputs.list }}

      - name: publish package
        run: lerna publish pre${{ env.TYPE }} --canary --preid alpha-${{ env.NUMBER }} --dist-tag alpha-${{ env.NUMBER }} --no-push --no-git-tag-version --yes
        env:
          TYPE: ${{ steps.upgrade-type.outputs.result }}
          NUMBER: ${{ fromJSON(steps.pr.outputs.result).number }}

      - name: make comment
        if: always()
        id: comment
        uses: actions/github-script@v4
        with:
          script: |
            const { STATUS, ACTION_URL } = process.env;

            let { CHANGED_PACKAGES } = process.env;
            CHANGED_PACKAGES = JSON.parse(CHANGED_PACKAGES);

            let message = "> /canary-publish\r\n\r\n";
            switch (STATUS) {
              case 'success':
                message += `üéâ canary publish complete!\r\n`;
                message += `You can install canary version via \`yarn add package@${{ TAG }}\``
                message += '**List of distributed packages**\r\n'
                CHANGED_PACKAGES.forEach((package) => {
                  message += `- ${package}\r\n`
                });

                break;

              case 'failure':
                message += `‚ùó canary publish failed.\r\nCheck error in github [action page](${ACTION_URL}).\r\n`;
                break;
            }

            return { message };
        env:
          STATUS: ${{ job.status }}
          ACTION_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          CHANGED_PACKAGES: ${{ steps.changed-packages.outputs.list }}

      - name: Comment on results
        if: always()
        uses: hasura/comment-progress@v2.1.0
        with:
          id: canary-publish-comment-${{ github.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.issue.number }}
          message: ${{ fromJSON(steps.comment.outputs.result).message }}
