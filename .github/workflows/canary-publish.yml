name: canary publish

on:
  issue_comment:
    types: [ created ]

jobs:
  canary-publish:
    name: canary-publish
    runs-on: ubuntu-latest
    if:
      (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'CONTRIBUTOR') &&
      startsWith(github.event.comment.body, '/canary-publish')
    steps:
      - name: get pr information
        uses: actions/github-script@v4
        id: pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }

            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              core.info(`Got PR: ${JSON.stringify(result.data)}`)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: get upgrade type from label
        uses: actions/github-script@v4
        env:
          LABELS: ${{ toJSON(fromJSON(steps.pr.outputs.result).labels) }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let { LABELS } = process.env;
            LABELS = JSON.parse(LABELS);

            const regexp = /upgrade:(major|minor|patch|premajor|preminor|prepatch|prerelease])/;
            const upgradeLabels = LABELS.filter((label) => regexp.test(label));

            if (upgradeLabels.length > 1) {
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùó Canary publish Faild: Upgrade label must be include only once'
              })
              throw new Error('Upgrade label must be include only once');
            }

            const label = upgradeLabels[0] || 'upgrade:patch';
            const matches = label.match(regexp);

            const type = matches && matches[1] ? matches[1] : 'patch';

            core.info(`Labels : ${JSON.stringify(LABELS)}`);
            core.info(`Upgrade type : ${type}`);

            return type;

